/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package automatastarter;

import java.awt.Color;
import utils.CardSwitcher;
import utils.ImageUtil;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.HashSet;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.Timer;

/**
 *
 * @author michael.roy-diclemen
 */
public class GamePanel extends javax.swing.JPanel implements MouseListener {

    public static final String CARD_NAME = "game";

    CardSwitcher switcher; // This is the parent panel
    Timer animTimer;

    // Load png of the ant
    static BufferedImage ant;

    //variables to control your animation elements
    int x;
    int y;
    int speed;

    LangtonAnt theAnt;

    // colours to be used when drawing
    static final Color DARKER_COLOR = new Color(67, 115, 67);
    static final Color LIGHTER_COLOR = new Color(123, 166, 111);
    static final Color ANT_COLOR = new Color(133, 130, 77);

    /**
     * Creates new form GamePanel
     */
    public GamePanel(CardSwitcher p) {
        initComponents();

        this.setFocusable(true);

        // tell the program we want to listen to the mouse
        addMouseListener(this);
        //tells us the panel that controls this one
        switcher = p;
        //create and start a Timer for animation
        animTimer = new Timer(1000, new AnimTimerTick());
        animTimer.start();

        ant = ImageUtil.loadAndResizeImage("antPng.png", 100, 100);

        //set up the key bindings
        setupKeys();

    }

    private void setupKeys() {
        //these lines map a physical key, to a name, and then a name to an 'action'.  You will change the key, name and action to suit your needs
        this.getInputMap().put(KeyStroke.getKeyStroke("LEFT"), "leftKey");
        this.getActionMap().put("leftKey", new Move("LEFT"));

        this.getInputMap().put(KeyStroke.getKeyStroke("W"), "wKey");
        this.getActionMap().put("wKey", new Move("w"));

        this.getInputMap().put(KeyStroke.getKeyStroke("D"), "dKey");
        this.getActionMap().put("dKey", new Move("d"));

        this.getInputMap().put(KeyStroke.getKeyStroke("X"), "xKey");
        this.getActionMap().put("xKey", new Move("x"));
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (theAnt != null) {
            drawGrid(theAnt.getGrid(), g, theAnt.getX(), theAnt.getY());
        }

    }

    // method to draw the grid the ant lives on
    void drawGrid(Boolean[][] square, Graphics g, int antX, int antY) {
        // loops through x and y components of the grid and prints out the according colour that represents the squares state
        for (int i = 0; i < square.length; i++) {
            for (int j = 0; j < square[0].length; j++) {
                if (i == antX && j == antY) {
                    g.setColor(ANT_COLOR);
                    g.fillRect(500 + i * 100, 100 + j * 100, 100, 100);   // represents the ant
                    g.drawImage(ant, 500 + i * 100, 100 + j * 100, this);

                } else if (square[i][j] == true) {
                    g.setColor(LIGHTER_COLOR);
                    g.fillRect(500 + i * 100, 100 + j * 100, 100, 100);    // represents the white square
                } else if (square[i][j] == false) {
                    g.setColor(DARKER_COLOR);
                    g.fillRect(500 + i * 100, 100 + j * 100, 100, 100);    // represents the black square
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        defaultOne = new javax.swing.JButton();
        defaultTwo = new javax.swing.JButton();
        defaultThree = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        increaseX = new javax.swing.JButton();
        decreaseX = new javax.swing.JButton();
        increaseY = new javax.swing.JButton();
        decreaseY = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        increaseSpd = new javax.swing.JButton();
        decreaseSpd = new javax.swing.JButton();
        startSim = new javax.swing.JButton();
        endSim1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        currentArg = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1555, 1162));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        defaultOne.setBackground(new java.awt.Color(86, 108, 145));
        defaultOne.setText("4 X 4, SPEED 1");
        defaultOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultOneActionPerformed(evt);
            }
        });

        defaultTwo.setBackground(new java.awt.Color(86, 108, 145));
        defaultTwo.setText("3 X 6, SPEED 1");
        defaultTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultTwoActionPerformed(evt);
            }
        });

        defaultThree.setBackground(new java.awt.Color(86, 108, 145));
        defaultThree.setText("7 X 7, SPEED 2");
        defaultThree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultThreeActionPerformed(evt);
            }
        });

        jLabel2.setText("ANT'S SPEED:");

        increaseX.setBackground(new java.awt.Color(162, 209, 144));
        increaseX.setForeground(new java.awt.Color(0, 0, 0));
        increaseX.setText("INCREASE X");
        increaseX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseXActionPerformed(evt);
            }
        });

        decreaseX.setBackground(new java.awt.Color(224, 111, 99));
        decreaseX.setForeground(new java.awt.Color(0, 0, 0));
        decreaseX.setText("DECREASE X");
        decreaseX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseXActionPerformed(evt);
            }
        });

        increaseY.setBackground(new java.awt.Color(162, 209, 144));
        increaseY.setForeground(new java.awt.Color(0, 0, 0));
        increaseY.setText("INCREASE Y");
        increaseY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseYActionPerformed(evt);
            }
        });

        decreaseY.setBackground(new java.awt.Color(224, 111, 99));
        decreaseY.setForeground(new java.awt.Color(0, 0, 0));
        decreaseY.setText("DECREASE Y");
        decreaseY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseYActionPerformed(evt);
            }
        });

        jLabel3.setText("DIMENSIONS:");

        increaseSpd.setBackground(new java.awt.Color(162, 209, 144));
        increaseSpd.setForeground(new java.awt.Color(0, 0, 0));
        increaseSpd.setText("INCREASE");
        increaseSpd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseSpdActionPerformed(evt);
            }
        });

        decreaseSpd.setBackground(new java.awt.Color(224, 111, 99));
        decreaseSpd.setForeground(new java.awt.Color(0, 0, 0));
        decreaseSpd.setText("DECREASE ");
        decreaseSpd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseSpdActionPerformed(evt);
            }
        });

        startSim.setText("START SIMULATION");
        startSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSimActionPerformed(evt);
            }
        });

        endSim1.setText("END SIMULATION");
        endSim1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endSim1ActionPerformed(evt);
            }
        });

        jLabel1.setText("CURRENT:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(increaseX, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(defaultOne, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(defaultTwo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(defaultThree, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(startSim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(endSim1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(decreaseSpd, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                        .addComponent(increaseSpd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(decreaseX, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(decreaseY, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(increaseY, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(currentArg, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(1340, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(startSim, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(endSim1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(defaultOne, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(defaultTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(defaultThree, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(increaseX, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decreaseX, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(increaseY, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decreaseY, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(increaseSpd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decreaseSpd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentArg, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(299, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

    }//GEN-LAST:event_formComponentShown

    private void defaultOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultOneActionPerformed
        // TODO add your handling code here:
        x = 4;
        y = 4;
        speed = 1;
    }//GEN-LAST:event_defaultOneActionPerformed

    private void defaultTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultTwoActionPerformed
        // TODO add your handling code here:
        x = 3;
        y = 6;
        speed = 1;
    }//GEN-LAST:event_defaultTwoActionPerformed

    private void defaultThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultThreeActionPerformed
        // TODO add your handling code here:
        x = 7;
        y = 7;
        speed = 2;
    }//GEN-LAST:event_defaultThreeActionPerformed

    // the following button methods are to raise and lower the x and y values of the grid and raise and lower the speed
    private void increaseXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseXActionPerformed
        // TODO add your handling code here:
        x++;

    }//GEN-LAST:event_increaseXActionPerformed

    private void decreaseXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseXActionPerformed
        // TODO add your handling code here:
        x--;
    }//GEN-LAST:event_decreaseXActionPerformed

    private void increaseYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseYActionPerformed
        // TODO add your handling code here:
        y++;
    }//GEN-LAST:event_increaseYActionPerformed

    private void decreaseYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseYActionPerformed
        // TODO add your handling code here:
        y--;
    }//GEN-LAST:event_decreaseYActionPerformed

    private void increaseSpdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseSpdActionPerformed
        // TODO add your handling code here:
        speed++;
    }//GEN-LAST:event_increaseSpdActionPerformed

    private void decreaseSpdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseSpdActionPerformed
        // TODO add your handling code here:
        speed--;
    }//GEN-LAST:event_decreaseSpdActionPerformed

    // method to move the ant around
    private void startSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSimActionPerformed
        // TODO add your handling code here:
        if (x > 0 && y > 0 && speed > 0) {
            theAnt = new LangtonAnt(x, y, speed);
        }
    }//GEN-LAST:event_startSimActionPerformed

    // button to exit the simulation and go to end panel
    private void endSim1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endSim1ActionPerformed
        // TODO add your handling code here:
        switcher.switchToCard(EndPanel.CARD_NAME);
    }//GEN-LAST:event_endSim1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentArg;
    private javax.swing.JButton decreaseSpd;
    private javax.swing.JButton decreaseX;
    private javax.swing.JButton decreaseY;
    private javax.swing.JButton defaultOne;
    private javax.swing.JButton defaultThree;
    private javax.swing.JButton defaultTwo;
    private javax.swing.JButton endSim1;
    private javax.swing.JButton increaseSpd;
    private javax.swing.JButton increaseX;
    private javax.swing.JButton increaseY;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton startSim;
    // End of variables declaration//GEN-END:variables

    /**
     * This event captures a click which is defined as pressing and releasing in
     * the same area
     *
     * @param me
     */
    public void mouseClicked(MouseEvent me) {

    }

    /**
     * When the mountain is pressed
     *
     * @param me
     */
    public void mousePressed(MouseEvent me) {
    }

    /**
     * When the mouse button is released
     *
     * @param me
     */
    public void mouseReleased(MouseEvent me) {

    }

    /**
     * When the mouse enters the area
     *
     * @param me
     */
    public void mouseEntered(MouseEvent me) {

    }

    /**
     * When the mouse exits the panel
     *
     * @param me
     */
    public void mouseExited(MouseEvent me) {

    }

    /**
     * Everything inside here happens when you click on a captured key.
     */
    private class Move extends AbstractAction {

        String key;

        public Move(String akey) {
            key = akey;
        }

        public void actionPerformed(ActionEvent ae) {
            // here you decide what you want to happen if a particular key is pressed
            System.out.println("llll" + key);

        }

    }

    /**
     * Everything inside this actionPerformed will happen every time the
     * animation timer clicks.
     */
    private class AnimTimerTick implements ActionListener {

        public void actionPerformed(ActionEvent ae) {
            // if the ant object isn't null, move it per timer tick
            if (theAnt != null) {
                // turn the ant and move it
                theAnt.moveAnt();
                System.out.print(theAnt);
            }
            
            // display current statistics of the ant sim on a label on panel
            currentArg.setText("X,Y: " + x + "," + y + "\nSpeed:" + speed);

            //force redraw
            repaint();
        }
    }
}
